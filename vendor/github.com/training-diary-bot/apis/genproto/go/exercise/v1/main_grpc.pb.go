// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: exercise/v1/main.proto

package exercisev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExerciseClient is the client API for Exercise service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExerciseClient interface {
	CreateCustomExercise(ctx context.Context, in *CreateCustomExerciseRequest, opts ...grpc.CallOption) (*CreateCustomExerciseResponse, error)
	GetExercisesByMuscleGroup(ctx context.Context, in *GetExercisesByMuscleGroupRequest, opts ...grpc.CallOption) (*GetExercisesByMuscleGroupResponse, error)
	GetMuscleGroups(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMuscleGroupsResponse, error)
	GetCustomExercises(ctx context.Context, in *GetCustomExercisesRequest, opts ...grpc.CallOption) (*GetCustomExercisesResponse, error)
}

type exerciseClient struct {
	cc grpc.ClientConnInterface
}

func NewExerciseClient(cc grpc.ClientConnInterface) ExerciseClient {
	return &exerciseClient{cc}
}

func (c *exerciseClient) CreateCustomExercise(ctx context.Context, in *CreateCustomExerciseRequest, opts ...grpc.CallOption) (*CreateCustomExerciseResponse, error) {
	out := new(CreateCustomExerciseResponse)
	err := c.cc.Invoke(ctx, "/exercise.v1.Exercise/CreateCustomExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exerciseClient) GetExercisesByMuscleGroup(ctx context.Context, in *GetExercisesByMuscleGroupRequest, opts ...grpc.CallOption) (*GetExercisesByMuscleGroupResponse, error) {
	out := new(GetExercisesByMuscleGroupResponse)
	err := c.cc.Invoke(ctx, "/exercise.v1.Exercise/GetExercisesByMuscleGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exerciseClient) GetMuscleGroups(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMuscleGroupsResponse, error) {
	out := new(GetMuscleGroupsResponse)
	err := c.cc.Invoke(ctx, "/exercise.v1.Exercise/GetMuscleGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exerciseClient) GetCustomExercises(ctx context.Context, in *GetCustomExercisesRequest, opts ...grpc.CallOption) (*GetCustomExercisesResponse, error) {
	out := new(GetCustomExercisesResponse)
	err := c.cc.Invoke(ctx, "/exercise.v1.Exercise/GetCustomExercises", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExerciseServer is the server API for Exercise service.
// All implementations should embed UnimplementedExerciseServer
// for forward compatibility
type ExerciseServer interface {
	CreateCustomExercise(context.Context, *CreateCustomExerciseRequest) (*CreateCustomExerciseResponse, error)
	GetExercisesByMuscleGroup(context.Context, *GetExercisesByMuscleGroupRequest) (*GetExercisesByMuscleGroupResponse, error)
	GetMuscleGroups(context.Context, *emptypb.Empty) (*GetMuscleGroupsResponse, error)
	GetCustomExercises(context.Context, *GetCustomExercisesRequest) (*GetCustomExercisesResponse, error)
}

// UnimplementedExerciseServer should be embedded to have forward compatible implementations.
type UnimplementedExerciseServer struct {
}

func (UnimplementedExerciseServer) CreateCustomExercise(context.Context, *CreateCustomExerciseRequest) (*CreateCustomExerciseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomExercise not implemented")
}
func (UnimplementedExerciseServer) GetExercisesByMuscleGroup(context.Context, *GetExercisesByMuscleGroupRequest) (*GetExercisesByMuscleGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExercisesByMuscleGroup not implemented")
}
func (UnimplementedExerciseServer) GetMuscleGroups(context.Context, *emptypb.Empty) (*GetMuscleGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMuscleGroups not implemented")
}
func (UnimplementedExerciseServer) GetCustomExercises(context.Context, *GetCustomExercisesRequest) (*GetCustomExercisesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomExercises not implemented")
}

// UnsafeExerciseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExerciseServer will
// result in compilation errors.
type UnsafeExerciseServer interface {
	mustEmbedUnimplementedExerciseServer()
}

func RegisterExerciseServer(s grpc.ServiceRegistrar, srv ExerciseServer) {
	s.RegisterService(&Exercise_ServiceDesc, srv)
}

func _Exercise_CreateCustomExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseServer).CreateCustomExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exercise.v1.Exercise/CreateCustomExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseServer).CreateCustomExercise(ctx, req.(*CreateCustomExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exercise_GetExercisesByMuscleGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExercisesByMuscleGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseServer).GetExercisesByMuscleGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exercise.v1.Exercise/GetExercisesByMuscleGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseServer).GetExercisesByMuscleGroup(ctx, req.(*GetExercisesByMuscleGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exercise_GetMuscleGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseServer).GetMuscleGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exercise.v1.Exercise/GetMuscleGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseServer).GetMuscleGroups(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exercise_GetCustomExercises_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomExercisesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseServer).GetCustomExercises(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exercise.v1.Exercise/GetCustomExercises",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseServer).GetCustomExercises(ctx, req.(*GetCustomExercisesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Exercise_ServiceDesc is the grpc.ServiceDesc for Exercise service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Exercise_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exercise.v1.Exercise",
	HandlerType: (*ExerciseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomExercise",
			Handler:    _Exercise_CreateCustomExercise_Handler,
		},
		{
			MethodName: "GetExercisesByMuscleGroup",
			Handler:    _Exercise_GetExercisesByMuscleGroup_Handler,
		},
		{
			MethodName: "GetMuscleGroups",
			Handler:    _Exercise_GetMuscleGroups_Handler,
		},
		{
			MethodName: "GetCustomExercises",
			Handler:    _Exercise_GetCustomExercises_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exercise/v1/main.proto",
}
